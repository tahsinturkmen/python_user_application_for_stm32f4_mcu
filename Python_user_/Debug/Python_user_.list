
Python_user_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf0  08003bf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d361  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b07  00000000  00000000  0002d39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b98  00000000  00000000  0002fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ba1  00000000  00000000  00030680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e089  00000000  00000000  00051221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9f50  00000000  00000000  0005f2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001291fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003394  00000000  00000000  0012924c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bb8 	.word	0x08003bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003bb8 	.word	0x08003bb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc64 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f820 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9ac 	bl	8000834 <MX_GPIO_Init>
  MX_TIM8_Init();
 80004dc:	f000 f8d8 	bl	8000690 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f976 	bl	80007d0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004e4:	f000 f882 	bl	80005ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

HAL_UART_Receive_IT(&huart1, (uint8_t*)gdata,2);
 80004e8:	2202      	movs	r2, #2
 80004ea:	4908      	ldr	r1, [pc, #32]	; (800050c <main+0x40>)
 80004ec:	4808      	ldr	r0, [pc, #32]	; (8000510 <main+0x44>)
 80004ee:	f002 fc02 	bl	8002cf6 <HAL_UART_Receive_IT>


HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 80004f2:	2100      	movs	r1, #0
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x48>)
 80004f6:	f001 fd81 	bl	8001ffc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LED_Apps(gdata);                               //
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <main+0x40>)
 80004fc:	f000 fb65 	bl	8000bca <LED_Apps>

	 HAL_UART_Receive_IT(&huart1,(uint8_t*)gdata,2); //
 8000500:	2202      	movs	r2, #2
 8000502:	4902      	ldr	r1, [pc, #8]	; (800050c <main+0x40>)
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <main+0x44>)
 8000506:	f002 fbf6 	bl	8002cf6 <HAL_UART_Receive_IT>
	  LED_Apps(gdata);                               //
 800050a:	e7f6      	b.n	80004fa <main+0x2e>
 800050c:	200000fc 	.word	0x200000fc
 8000510:	200000b8 	.word	0x200000b8
 8000514:	20000070 	.word	0x20000070

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fb3e 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800058c:	2354      	movs	r3, #84	; 0x54
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000594:	2307      	movs	r3, #7
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 ffed 	bl	800157c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f9ba 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fa4e 	bl	8001a6c <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 f9a3 	bl	8000920 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_TIM1_Init+0x9c>)
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <MX_TIM1_Init+0xa0>)
 800060c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_TIM1_Init+0x9c>)
 8000610:	f240 3247 	movw	r2, #839	; 0x347
 8000614:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_TIM1_Init+0x9c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_TIM1_Init+0x9c>)
 800061e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000622:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_TIM1_Init+0x9c>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_TIM1_Init+0x9c>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_TIM1_Init+0x9c>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000636:	4814      	ldr	r0, [pc, #80]	; (8000688 <MX_TIM1_Init+0x9c>)
 8000638:	f001 fc38 	bl	8001eac <HAL_TIM_Base_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000642:	f000 f96d 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4619      	mov	r1, r3
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_TIM1_Init+0x9c>)
 8000654:	f001 fe5c 	bl	8002310 <HAL_TIM_ConfigClockSource>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800065e:	f000 f95f 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <MX_TIM1_Init+0x9c>)
 8000670:	f002 fa26 	bl	8002ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800067a:	f000 f951 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000028 	.word	0x20000028
 800068c:	40010000 	.word	0x40010000

08000690 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2220      	movs	r2, #32
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fa6d 	bl	8003ba8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006ce:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <MX_TIM8_Init+0x138>)
 80006d0:	4a3e      	ldr	r2, [pc, #248]	; (80007cc <MX_TIM8_Init+0x13c>)
 80006d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 80006d4:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <MX_TIM8_Init+0x138>)
 80006d6:	22a7      	movs	r2, #167	; 0xa7
 80006d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	4b3b      	ldr	r3, [pc, #236]	; (80007c8 <MX_TIM8_Init+0x138>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 80006e0:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <MX_TIM8_Init+0x138>)
 80006e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80006e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <MX_TIM8_Init+0x138>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80006ee:	4b36      	ldr	r3, [pc, #216]	; (80007c8 <MX_TIM8_Init+0x138>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f4:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <MX_TIM8_Init+0x138>)
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80006fa:	4833      	ldr	r0, [pc, #204]	; (80007c8 <MX_TIM8_Init+0x138>)
 80006fc:	f001 fbd6 	bl	8001eac <HAL_TIM_Base_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000706:	f000 f90b 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000710:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000714:	4619      	mov	r1, r3
 8000716:	482c      	ldr	r0, [pc, #176]	; (80007c8 <MX_TIM8_Init+0x138>)
 8000718:	f001 fdfa 	bl	8002310 <HAL_TIM_ConfigClockSource>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000722:	f000 f8fd 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000726:	4828      	ldr	r0, [pc, #160]	; (80007c8 <MX_TIM8_Init+0x138>)
 8000728:	f001 fc0f 	bl	8001f4a <HAL_TIM_PWM_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000732:	f000 f8f5 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800073e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000742:	4619      	mov	r1, r3
 8000744:	4820      	ldr	r0, [pc, #128]	; (80007c8 <MX_TIM8_Init+0x138>)
 8000746:	f002 f9bb 	bl	8002ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000750:	f000 f8e6 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000754:	2360      	movs	r3, #96	; 0x60
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <MX_TIM8_Init+0x138>)
 800077a:	f001 fd07 	bl	800218c <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000784:	f000 f8cc 	bl	8000920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800079c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <MX_TIM8_Init+0x138>)
 80007ac:	f002 fa04 	bl	8002bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80007b6:	f000 f8b3 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80007ba:	4803      	ldr	r0, [pc, #12]	; (80007c8 <MX_TIM8_Init+0x138>)
 80007bc:	f000 f916 	bl	80009ec <HAL_TIM_MspPostInit>

}
 80007c0:	bf00      	nop
 80007c2:	3758      	adds	r7, #88	; 0x58
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000070 	.word	0x20000070
 80007cc:	40010400 	.word	0x40010400

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_USART1_UART_Init+0x5c>)
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <MX_USART1_UART_Init+0x60>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1200;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART1_UART_Init+0x5c>)
 80007dc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_USART1_UART_Init+0x5c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USART1_UART_Init+0x5c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART1_UART_Init+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_USART1_UART_Init+0x5c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART1_UART_Init+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_USART1_UART_Init+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <MX_USART1_UART_Init+0x5c>)
 8000808:	f002 fa28 	bl	8002c5c <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f885 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn  , 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2025      	movs	r0, #37	; 0x25
 800081c:	f000 fc2f 	bl	800107e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000820:	2025      	movs	r0, #37	; 0x25
 8000822:	f000 fc48 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000b8 	.word	0x200000b8
 8000830:	40011000 	.word	0x40011000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_GPIO_Init+0x9c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_GPIO_Init+0x9c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <MX_GPIO_Init+0x9c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_GPIO_Init+0x9c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MX_GPIO_Init+0xa0>)
 80008a6:	f000 fe4f 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80008aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0xa0>)
 80008c4:	f000 fca4 	bl	8001210 <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020c00 	.word	0x40020c00

080008d8 <USART1_IRQHandler>:
/* USER CODE BEGIN 4 */



void USART1_IRQHandler(const uint8_t * data )
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USART1_IRQn 0 */
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13|GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <USART1_IRQHandler+0x3c>)
 80008e8:	f000 fe2e 	bl	8001548 <HAL_GPIO_WritePin>
    if((data[0] == '5') ){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b35      	cmp	r3, #53	; 0x35
 80008f2:	d107      	bne.n	8000904 <USART1_IRQHandler+0x2c>
	TIM8->CCR1 = 450 + ((data[1])* 4U); /*--> Servo motor angel control parameter<--*/
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3301      	adds	r3, #1
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <USART1_IRQHandler+0x40>)
 80008fe:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8000902:	6353      	str	r3, [r2, #52]	; 0x34
    }



	/* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <USART1_IRQHandler+0x44>)
 8000906:	f002 fa27 	bl	8002d58 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40010400 	.word	0x40010400
 800091c:	200000b8 	.word	0x200000b8

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fb7c 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <HAL_TIM_Base_MspInit+0x64>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10e      	bne.n	80009ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_TIM_Base_MspInit+0x68>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <HAL_TIM_Base_MspInit+0x68>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_TIM_Base_MspInit+0x68>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80009aa:	e012      	b.n	80009d2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_TIM_Base_MspInit+0x6c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d10d      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_TIM_Base_MspInit+0x68>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <HAL_TIM_Base_MspInit+0x68>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_TIM_Base_MspInit+0x68>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40010000 	.word	0x40010000
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40010400 	.word	0x40010400

080009ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <HAL_TIM_MspPostInit+0x68>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d11d      	bne.n	8000a4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_TIM_MspPostInit+0x6c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <HAL_TIM_MspPostInit+0x6c>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_TIM_MspPostInit+0x6c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = pwm_Pin;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pwm_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_TIM_MspPostInit+0x70>)
 8000a46:	f000 fbe3 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3720      	adds	r7, #32
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010400 	.word	0x40010400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020800 	.word	0x40020800

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_UART_MspInit+0x94>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d134      	bne.n	8000aec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000acc:	2307      	movs	r3, #7
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <HAL_UART_MspInit+0x9c>)
 8000ad8:	f000 fb9a 	bl	8001210 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2025      	movs	r0, #37	; 0x25
 8000ae2:	f000 facc 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae6:	2025      	movs	r0, #37	; 0x25
 8000ae8:	f000 fae5 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f978 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7e:	490e      	ldr	r1, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b94:	4c0b      	ldr	r4, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd7 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f002 ffdb 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fc8f 	bl	80004cc <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bbc:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc4:	20000104 	.word	0x20000104

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>

08000bca <LED_Apps>:
 *this part collects all defined functions in a single function and
 *allows us to call it in the part we want
\*******************************************************************************/

void LED_Apps( uint8_t *data)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	LED_On(data);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f80e 	bl	8000bf4 <LED_On>
	LED_Ambulance(data);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f825 	bl	8000c28 <LED_Ambulance>
	LED_Party(data);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f860 	bl	8000ca4 <LED_Party>
	LED_Off(data);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 f8bf 	bl	8000d68 <LED_Off>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <LED_On>:
 *defgroup LED_ON_COMMUNICATION_PROTOCOL = '1'
 *defgroup LED_ON_DATA = 'A'
\*******************************************************************************/

void LED_On(uint8_t *data1)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
   if((data1[0] == LED_ON_COMMUNICATION_PROTOCOL) && (data1[1] == LED_ON_DATA))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b31      	cmp	r3, #49	; 0x31
 8000c02:	d10a      	bne.n	8000c1a <LED_On+0x26>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b41      	cmp	r3, #65	; 0x41
 8000c0c:	d105      	bne.n	8000c1a <LED_On+0x26>
	{
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15 , GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <LED_On+0x30>)
 8000c16:	f000 fc97 	bl	8001548 <HAL_GPIO_WritePin>
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <LED_Ambulance>:
 *defgroup LED_AMBULANCE_COMMUNICATION_PROTOCOL = '2'
 *defgroup LED_AMBULANCE_DATA = 'B'
\*******************************************************************************/

void LED_Ambulance(uint8_t * data1)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
   if((data1[0] == LED_AMBULANCE_COMMUNICATION_PROTOCOL) && (data1[1] == LED_AMBULANCE_DATA))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b32      	cmp	r3, #50	; 0x32
 8000c36:	d12e      	bne.n	8000c96 <LED_Ambulance+0x6e>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b42      	cmp	r3, #66	; 0x42
 8000c40:	d129      	bne.n	8000c96 <LED_Ambulance+0x6e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 |GPIO_PIN_13  , GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c48:	4815      	ldr	r0, [pc, #84]	; (8000ca0 <LED_Ambulance+0x78>)
 8000c4a:	f000 fc7d 	bl	8001548 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c54:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <LED_Ambulance+0x78>)
 8000c56:	f000 fc77 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	; 0x64
 8000c5c:	f000 f910 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <LED_Ambulance+0x78>)
 8000c68:	f000 fc6e 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000c6c:	2064      	movs	r0, #100	; 0x64
 8000c6e:	f000 f907 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <LED_Ambulance+0x78>)
 8000c7a:	f000 fc65 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f000 f8fe 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <LED_Ambulance+0x78>)
 8000c8c:	f000 fc5c 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000c90:	2064      	movs	r0, #100	; 0x64
 8000c92:	f000 f8f5 	bl	8000e80 <HAL_Delay>
		}
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <LED_Party>:
 *defgroup LED_BLINK_COMMUNICATION_PROTOCOL = '3'
 *defgroup LED_BLINK_DATA = 'C'
\*******************************************************************************/

void LED_Party(uint8_t * data1)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
   if((data1[0] == LED_BLINK_COMMUNICATION_PROTOCOL ) && (data1[1] == LED_BLINK_DATA))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b33      	cmp	r3, #51	; 0x33
 8000cb2:	d152      	bne.n	8000d5a <LED_Party+0xb6>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b43      	cmp	r3, #67	; 0x43
 8000cbc:	d14d      	bne.n	8000d5a <LED_Party+0xb6>
	 {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15 , GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000cc4:	4827      	ldr	r0, [pc, #156]	; (8000d64 <LED_Party+0xc0>)
 8000cc6:	f000 fc3f 	bl	8001548 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd0:	4824      	ldr	r0, [pc, #144]	; (8000d64 <LED_Party+0xc0>)
 8000cd2:	f000 fc39 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000cd6:	2064      	movs	r0, #100	; 0x64
 8000cd8:	f000 f8d2 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce2:	4820      	ldr	r0, [pc, #128]	; (8000d64 <LED_Party+0xc0>)
 8000ce4:	f000 fc30 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	f000 f8c9 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf4:	481b      	ldr	r0, [pc, #108]	; (8000d64 <LED_Party+0xc0>)
 8000cf6:	f000 fc27 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000cfa:	2064      	movs	r0, #100	; 0x64
 8000cfc:	f000 f8c0 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d06:	4817      	ldr	r0, [pc, #92]	; (8000d64 <LED_Party+0xc0>)
 8000d08:	f000 fc1e 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000d0c:	2064      	movs	r0, #100	; 0x64
 8000d0e:	f000 f8b7 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <LED_Party+0xc0>)
 8000d1a:	f000 fc15 	bl	8001548 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000d1e:	2064      	movs	r0, #100	; 0x64
 8000d20:	f000 f8ae 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <LED_Party+0xc0>)
 8000d2c:	f000 fc0c 	bl	8001548 <HAL_GPIO_WritePin>
		    HAL_Delay(100);
 8000d30:	2064      	movs	r0, #100	; 0x64
 8000d32:	f000 f8a5 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <LED_Party+0xc0>)
 8000d3e:	f000 fc03 	bl	8001548 <HAL_GPIO_WritePin>
		 	 HAL_Delay(100);
 8000d42:	2064      	movs	r0, #100	; 0x64
 8000d44:	f000 f89c 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <LED_Party+0xc0>)
 8000d50:	f000 fbfa 	bl	8001548 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000d54:	2064      	movs	r0, #100	; 0x64
 8000d56:	f000 f893 	bl	8000e80 <HAL_Delay>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <LED_Off>:
 * @defgroup LED_OFF_COMMUNICATION_PROTOCOL = '4'
 * @defgroup LED_OFF_DATA = 'D'
\*******************************************************************************/

void LED_Off(uint8_t * data1)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    if((data1[0] == LED_OFF_COMMUNICATION_PROTOCOL) && (data1[1] == LED_OFF_DATA))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b34      	cmp	r3, #52	; 0x34
 8000d76:	d10a      	bne.n	8000d8e <LED_Off+0x26>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b44      	cmp	r3, #68	; 0x44
 8000d80:	d105      	bne.n	8000d8e <LED_Off+0x26>
	  {
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15 , GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <LED_Off+0x30>)
 8000d8a:	f000 fbdd 	bl	8001548 <HAL_GPIO_WritePin>
	  }
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40020c00 	.word	0x40020c00

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f94f 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fdac 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f967 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f92f 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000100 	.word	0x20000100

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000100 	.word	0x20000100

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff29 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff3e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff31 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff feb6 	bl	8000e68 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d008      	beq.n	800111c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e052      	b.n	80011c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0216 	bic.w	r2, r2, #22
 800112a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800113a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	2b00      	cmp	r3, #0
 8001142:	d103      	bne.n	800114c <HAL_DMA_Abort+0x62>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0208 	bic.w	r2, r2, #8
 800115a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116c:	e013      	b.n	8001196 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800116e:	f7ff fe7b 	bl	8000e68 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b05      	cmp	r3, #5
 800117a:	d90c      	bls.n	8001196 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2220      	movs	r2, #32
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e015      	b.n	80011c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e4      	bne.n	800116e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	223f      	movs	r2, #63	; 0x3f
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d004      	beq.n	80011e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e00c      	b.n	8001202 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2205      	movs	r2, #5
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e16b      	b.n	8001504 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 815a 	bne.w	80014fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d005      	beq.n	8001262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125e:	2b02      	cmp	r3, #2
 8001260:	d130      	bne.n	80012c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 0201 	and.w	r2, r3, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d017      	beq.n	8001300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d123      	bne.n	8001354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0203 	and.w	r2, r3, #3
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80b4 	beq.w	80014fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b60      	ldr	r3, [pc, #384]	; (800151c <HAL_GPIO_Init+0x30c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a5f      	ldr	r2, [pc, #380]	; (800151c <HAL_GPIO_Init+0x30c>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b5d      	ldr	r3, [pc, #372]	; (800151c <HAL_GPIO_Init+0x30c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b2:	4a5b      	ldr	r2, [pc, #364]	; (8001520 <HAL_GPIO_Init+0x310>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a52      	ldr	r2, [pc, #328]	; (8001524 <HAL_GPIO_Init+0x314>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02b      	beq.n	8001436 <HAL_GPIO_Init+0x226>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a51      	ldr	r2, [pc, #324]	; (8001528 <HAL_GPIO_Init+0x318>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_Init+0x222>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a50      	ldr	r2, [pc, #320]	; (800152c <HAL_GPIO_Init+0x31c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_Init+0x21e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_GPIO_Init+0x320>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x21a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <HAL_GPIO_Init+0x324>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x216>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_GPIO_Init+0x328>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x212>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <HAL_GPIO_Init+0x32c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x20e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <HAL_GPIO_Init+0x330>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x20a>
 8001416:	2307      	movs	r3, #7
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800141a:	2308      	movs	r3, #8
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x310>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_GPIO_Init+0x334>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a32      	ldr	r2, [pc, #200]	; (8001544 <HAL_GPIO_Init+0x334>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_GPIO_Init+0x334>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae90 	bls.w	800122c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40021800 	.word	0x40021800
 8001540:	40021c00 	.word	0x40021c00
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e267      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d075      	beq.n	8001686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d00c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a6:	4b85      	ldr	r3, [pc, #532]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d112      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b2:	4b82      	ldr	r3, [pc, #520]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015be:	d10b      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	4b7e      	ldr	r3, [pc, #504]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d05b      	beq.n	8001684 <HAL_RCC_OscConfig+0x108>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d157      	bne.n	8001684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e242      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e0:	d106      	bne.n	80015f0 <HAL_RCC_OscConfig+0x74>
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a75      	ldr	r2, [pc, #468]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x98>
 80015fa:	4b70      	ldr	r3, [pc, #448]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6f      	ldr	r2, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b6d      	ldr	r3, [pc, #436]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6c      	ldr	r2, [pc, #432]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 8001614:	4b69      	ldr	r3, [pc, #420]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a68      	ldr	r2, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a65      	ldr	r2, [pc, #404]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fc18 	bl	8000e68 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc14 	bl	8000e68 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e207      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xc0>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fc04 	bl	8000e68 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fc00 	bl	8000e68 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1f3      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b51      	ldr	r3, [pc, #324]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0xe8>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d063      	beq.n	800175a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x152>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1c7      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e03a      	b.n	800175a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_RCC_OscConfig+0x244>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fbb9 	bl	8000e68 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fbb5 	bl	8000e68 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1a8      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4925      	ldr	r1, [pc, #148]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_RCC_OscConfig+0x244>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fb98 	bl	8000e68 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173c:	f7ff fb94 	bl	8000e68 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e187      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d036      	beq.n	80017d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d016      	beq.n	800179c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_RCC_OscConfig+0x248>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fb78 	bl	8000e68 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff fb74 	bl	8000e68 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e167      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x200>
 800179a:	e01b      	b.n	80017d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_OscConfig+0x248>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fb61 	bl	8000e68 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	e00e      	b.n	80017c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff fb5d 	bl	8000e68 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d907      	bls.n	80017c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e150      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	42470000 	.word	0x42470000
 80017c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ea      	bne.n	80017aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8097 	beq.w	8001910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10f      	bne.n	8001812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a7c      	ldr	r2, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a73      	ldr	r2, [pc, #460]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff fb1d 	bl	8000e68 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff fb19 	bl	8000e68 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e10c      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x2ea>
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a63      	ldr	r2, [pc, #396]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	e01c      	b.n	80018a0 <HAL_RCC_OscConfig+0x324>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b05      	cmp	r3, #5
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x30c>
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a5b      	ldr	r2, [pc, #364]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0x324>
 8001888:	4b58      	ldr	r3, [pc, #352]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a57      	ldr	r2, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	4b55      	ldr	r3, [pc, #340]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a54      	ldr	r2, [pc, #336]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800189a:	f023 0304 	bic.w	r3, r3, #4
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d015      	beq.n	80018d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fade 	bl	8000e68 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff fada 	bl	8000e68 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0cb      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ee      	beq.n	80018b0 <HAL_RCC_OscConfig+0x334>
 80018d2:	e014      	b.n	80018fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fac8 	bl	8000e68 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff fac4 	bl	8000e68 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0b5      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ee      	bne.n	80018dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	4a38      	ldr	r2, [pc, #224]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80a1 	beq.w	8001a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	d05c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d141      	bne.n	80019b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fa98 	bl	8000e68 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fa94 	bl	8000e68 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e087      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	019b      	lsls	r3, r3, #6
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	085b      	lsrs	r3, r3, #1
 8001972:	3b01      	subs	r3, #1
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	491b      	ldr	r1, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fa6d 	bl	8000e68 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff fa69 	bl	8000e68 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e05c      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x416>
 80019b0:	e054      	b.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fa56 	bl	8000e68 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fa52 	bl	8000e68 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e045      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x444>
 80019de:	e03d      	b.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e038      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000
 80019f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x4ec>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d028      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d121      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d11a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d111      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0cc      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d90c      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d044      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d119      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e067      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4934      	ldr	r1, [pc, #208]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff f984 	bl	8000e68 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff f980 	bl	8000e68 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e04f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d20c      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f821 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f8e4 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	08003bd0 	.word	0x08003bd0
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c3c:	b094      	sub	sp, #80	; 0x50
 8001c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	647b      	str	r3, [r7, #68]	; 0x44
 8001c44:	2300      	movs	r3, #0
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c48:	2300      	movs	r3, #0
 8001c4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c50:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d00d      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	f200 80e1 	bhi.w	8001e24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x34>
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c6a:	e0db      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c70:	e0db      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c72:	4b73      	ldr	r3, [pc, #460]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c76:	e0d8      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c78:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c82:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d063      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001caa:	4622      	mov	r2, r4
 8001cac:	462b      	mov	r3, r5
 8001cae:	f04f 0000 	mov.w	r0, #0
 8001cb2:	f04f 0100 	mov.w	r1, #0
 8001cb6:	0159      	lsls	r1, r3, #5
 8001cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cbc:	0150      	lsls	r0, r2, #5
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	1a51      	subs	r1, r2, r1
 8001cc6:	6139      	str	r1, [r7, #16]
 8001cc8:	4629      	mov	r1, r5
 8001cca:	eb63 0301 	sbc.w	r3, r3, r1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cdc:	4659      	mov	r1, fp
 8001cde:	018b      	lsls	r3, r1, #6
 8001ce0:	4651      	mov	r1, sl
 8001ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ce6:	4651      	mov	r1, sl
 8001ce8:	018a      	lsls	r2, r1, #6
 8001cea:	4651      	mov	r1, sl
 8001cec:	ebb2 0801 	subs.w	r8, r2, r1
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d0a:	4690      	mov	r8, r2
 8001d0c:	4699      	mov	r9, r3
 8001d0e:	4623      	mov	r3, r4
 8001d10:	eb18 0303 	adds.w	r3, r8, r3
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	462b      	mov	r3, r5
 8001d18:	eb49 0303 	adc.w	r3, r9, r3
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	024b      	lsls	r3, r1, #9
 8001d2e:	4621      	mov	r1, r4
 8001d30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d34:	4621      	mov	r1, r4
 8001d36:	024a      	lsls	r2, r1, #9
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3e:	2200      	movs	r2, #0
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d48:	f7fe fa3e 	bl	80001c8 <__aeabi_uldivmod>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4613      	mov	r3, r2
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d54:	e058      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	4611      	mov	r1, r2
 8001d62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d66:	623b      	str	r3, [r7, #32]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d70:	4642      	mov	r2, r8
 8001d72:	464b      	mov	r3, r9
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0159      	lsls	r1, r3, #5
 8001d7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d82:	0150      	lsls	r0, r2, #5
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4641      	mov	r1, r8
 8001d8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d8e:	4649      	mov	r1, r9
 8001d90:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001da0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001da4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001da8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dac:	eb63 050b 	sbc.w	r5, r3, fp
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	00eb      	lsls	r3, r5, #3
 8001dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dbe:	00e2      	lsls	r2, r4, #3
 8001dc0:	4614      	mov	r4, r2
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	18e3      	adds	r3, r4, r3
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	464b      	mov	r3, r9
 8001dcc:	eb45 0303 	adc.w	r3, r5, r3
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dde:	4629      	mov	r1, r5
 8001de0:	028b      	lsls	r3, r1, #10
 8001de2:	4621      	mov	r1, r4
 8001de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001de8:	4621      	mov	r1, r4
 8001dea:	028a      	lsls	r2, r1, #10
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df2:	2200      	movs	r2, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	61fa      	str	r2, [r7, #28]
 8001df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dfc:	f7fe f9e4 	bl	80001c8 <__aeabi_uldivmod>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4613      	mov	r3, r2
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e22:	e002      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3750      	adds	r7, #80	; 0x50
 8001e30:	46bd      	mov	sp, r7
 8001e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	08003be0 	.word	0x08003be0

08001e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e88:	f7ff ffdc 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0b5b      	lsrs	r3, r3, #13
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	08003be0 	.word	0x08003be0

08001eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e041      	b.n	8001f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe fd52 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f000 fad8 	bl	80024a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e041      	b.n	8001fe0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f839 	bl	8001fe8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4610      	mov	r0, r2
 8001f8a:	f000 fa89 	bl	80024a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_TIM_PWM_Start+0x24>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e022      	b.n	8002066 <HAL_TIM_PWM_Start+0x6a>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b04      	cmp	r3, #4
 8002024:	d109      	bne.n	800203a <HAL_TIM_PWM_Start+0x3e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	e015      	b.n	8002066 <HAL_TIM_PWM_Start+0x6a>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d109      	bne.n	8002054 <HAL_TIM_PWM_Start+0x58>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e008      	b.n	8002066 <HAL_TIM_PWM_Start+0x6a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07c      	b.n	8002168 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d104      	bne.n	800207e <HAL_TIM_PWM_Start+0x82>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800207c:	e013      	b.n	80020a6 <HAL_TIM_PWM_Start+0xaa>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d104      	bne.n	800208e <HAL_TIM_PWM_Start+0x92>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800208c:	e00b      	b.n	80020a6 <HAL_TIM_PWM_Start+0xaa>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d104      	bne.n	800209e <HAL_TIM_PWM_Start+0xa2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800209c:	e003      	b.n	80020a6 <HAL_TIM_PWM_Start+0xaa>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2201      	movs	r2, #1
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fce0 	bl	8002a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a2d      	ldr	r2, [pc, #180]	; (8002170 <HAL_TIM_PWM_Start+0x174>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d004      	beq.n	80020c8 <HAL_TIM_PWM_Start+0xcc>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <HAL_TIM_PWM_Start+0x178>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_TIM_PWM_Start+0xd0>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_TIM_PWM_Start+0xd2>
 80020cc:	2300      	movs	r3, #0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a22      	ldr	r2, [pc, #136]	; (8002170 <HAL_TIM_PWM_Start+0x174>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <HAL_TIM_PWM_Start+0x136>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d01d      	beq.n	8002132 <HAL_TIM_PWM_Start+0x136>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <HAL_TIM_PWM_Start+0x17c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d018      	beq.n	8002132 <HAL_TIM_PWM_Start+0x136>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_TIM_PWM_Start+0x180>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_TIM_PWM_Start+0x136>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_TIM_PWM_Start+0x184>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00e      	beq.n	8002132 <HAL_TIM_PWM_Start+0x136>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_TIM_PWM_Start+0x178>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d009      	beq.n	8002132 <HAL_TIM_PWM_Start+0x136>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_TIM_PWM_Start+0x188>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_TIM_PWM_Start+0x136>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <HAL_TIM_PWM_Start+0x18c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d111      	bne.n	8002156 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d010      	beq.n	8002166 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002154:	e007      	b.n	8002166 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40010000 	.word	0x40010000
 8002174:	40010400 	.word	0x40010400
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800
 8002180:	40000c00 	.word	0x40000c00
 8002184:	40014000 	.word	0x40014000
 8002188:	40001800 	.word	0x40001800

0800218c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0ae      	b.n	8002308 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	f200 809f 	bhi.w	80022f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021f5 	.word	0x080021f5
 80021c4:	080022f9 	.word	0x080022f9
 80021c8:	080022f9 	.word	0x080022f9
 80021cc:	080022f9 	.word	0x080022f9
 80021d0:	08002235 	.word	0x08002235
 80021d4:	080022f9 	.word	0x080022f9
 80021d8:	080022f9 	.word	0x080022f9
 80021dc:	080022f9 	.word	0x080022f9
 80021e0:	08002277 	.word	0x08002277
 80021e4:	080022f9 	.word	0x080022f9
 80021e8:	080022f9 	.word	0x080022f9
 80021ec:	080022f9 	.word	0x080022f9
 80021f0:	080022b7 	.word	0x080022b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f9f0 	bl	80025e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0204 	bic.w	r2, r2, #4
 800221e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	619a      	str	r2, [r3, #24]
      break;
 8002232:	e064      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fa40 	bl	80026c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6999      	ldr	r1, [r3, #24]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	619a      	str	r2, [r3, #24]
      break;
 8002274:	e043      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fa95 	bl	80027ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0208 	orr.w	r2, r2, #8
 8002290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0204 	bic.w	r2, r2, #4
 80022a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69d9      	ldr	r1, [r3, #28]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	61da      	str	r2, [r3, #28]
      break;
 80022b4:	e023      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fae9 	bl	8002894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69d9      	ldr	r1, [r3, #28]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	021a      	lsls	r2, r3, #8
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	61da      	str	r2, [r3, #28]
      break;
 80022f6:	e002      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	75fb      	strb	r3, [r7, #23]
      break;
 80022fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002306:	7dfb      	ldrb	r3, [r7, #23]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e0b4      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x186>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d03e      	beq.n	80023e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236a:	f200 8087 	bhi.w	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	f000 8086 	beq.w	8002482 <HAL_TIM_ConfigClockSource+0x172>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d87f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b70      	cmp	r3, #112	; 0x70
 800237e:	d01a      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d87b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b60      	cmp	r3, #96	; 0x60
 8002386:	d050      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x11a>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d877      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800238c:	2b50      	cmp	r3, #80	; 0x50
 800238e:	d03c      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xfa>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d873      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d058      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x13a>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d86f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b30      	cmp	r3, #48	; 0x30
 800239e:	d064      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d86b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d060      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d867      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05c      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d05a      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	e062      	b.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f000 fb35 	bl	8002a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	609a      	str	r2, [r3, #8]
      break;
 80023e2:	e04f      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f000 fb1e 	bl	8002a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002406:	609a      	str	r2, [r3, #8]
      break;
 8002408:	e03c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	461a      	mov	r2, r3
 8002418:	f000 fa92 	bl	8002940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2150      	movs	r1, #80	; 0x50
 8002422:	4618      	mov	r0, r3
 8002424:	f000 faeb 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 8002428:	e02c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f000 fab1 	bl	800299e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2160      	movs	r1, #96	; 0x60
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fadb 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 8002448:	e01c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 fa72 	bl	8002940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	4618      	mov	r0, r3
 8002464:	f000 facb 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 8002468:	e00c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f000 fac2 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 800247a:	e003      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      break;
 8002480:	e000      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a40      	ldr	r2, [pc, #256]	; (80025b4 <TIM_Base_SetConfig+0x114>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <TIM_Base_SetConfig+0x40>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024be:	d00f      	beq.n	80024e0 <TIM_Base_SetConfig+0x40>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a3d      	ldr	r2, [pc, #244]	; (80025b8 <TIM_Base_SetConfig+0x118>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00b      	beq.n	80024e0 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a3c      	ldr	r2, [pc, #240]	; (80025bc <TIM_Base_SetConfig+0x11c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <TIM_Base_SetConfig+0x120>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d003      	beq.n	80024e0 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3a      	ldr	r2, [pc, #232]	; (80025c4 <TIM_Base_SetConfig+0x124>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d108      	bne.n	80024f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <TIM_Base_SetConfig+0x114>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02b      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002500:	d027      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a2c      	ldr	r2, [pc, #176]	; (80025b8 <TIM_Base_SetConfig+0x118>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d023      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <TIM_Base_SetConfig+0x11c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01f      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2a      	ldr	r2, [pc, #168]	; (80025c0 <TIM_Base_SetConfig+0x120>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01b      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a29      	ldr	r2, [pc, #164]	; (80025c4 <TIM_Base_SetConfig+0x124>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d017      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <TIM_Base_SetConfig+0x128>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a27      	ldr	r2, [pc, #156]	; (80025cc <TIM_Base_SetConfig+0x12c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00f      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <TIM_Base_SetConfig+0x130>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a25      	ldr	r2, [pc, #148]	; (80025d4 <TIM_Base_SetConfig+0x134>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <TIM_Base_SetConfig+0x138>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <TIM_Base_SetConfig+0x13c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <TIM_Base_SetConfig+0x114>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_Base_SetConfig+0xf8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <TIM_Base_SetConfig+0x124>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d103      	bne.n	80025a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	615a      	str	r2, [r3, #20]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40000800 	.word	0x40000800
 80025c0:	40000c00 	.word	0x40000c00
 80025c4:	40010400 	.word	0x40010400
 80025c8:	40014000 	.word	0x40014000
 80025cc:	40014400 	.word	0x40014400
 80025d0:	40014800 	.word	0x40014800
 80025d4:	40001800 	.word	0x40001800
 80025d8:	40001c00 	.word	0x40001c00
 80025dc:	40002000 	.word	0x40002000

080025e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f023 0201 	bic.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f023 0302 	bic.w	r3, r3, #2
 8002628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a20      	ldr	r2, [pc, #128]	; (80026b8 <TIM_OC1_SetConfig+0xd8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_OC1_SetConfig+0x64>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <TIM_OC1_SetConfig+0xdc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d10c      	bne.n	800265e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0308 	bic.w	r3, r3, #8
 800264a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <TIM_OC1_SetConfig+0xd8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_OC1_SetConfig+0x8e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <TIM_OC1_SetConfig+0xdc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800267c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	621a      	str	r2, [r3, #32]
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40010400 	.word	0x40010400

080026c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0210 	bic.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f023 0320 	bic.w	r3, r3, #32
 800270a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <TIM_OC2_SetConfig+0xe4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <TIM_OC2_SetConfig+0x68>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <TIM_OC2_SetConfig+0xe8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d10d      	bne.n	8002744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <TIM_OC2_SetConfig+0xe4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_OC2_SetConfig+0x94>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <TIM_OC2_SetConfig+0xe8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d113      	bne.n	800277c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800275a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	621a      	str	r2, [r3, #32]
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40010400 	.word	0x40010400

080027ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a21      	ldr	r2, [pc, #132]	; (800288c <TIM_OC3_SetConfig+0xe0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_OC3_SetConfig+0x66>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <TIM_OC3_SetConfig+0xe4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10d      	bne.n	800282e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800282c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a16      	ldr	r2, [pc, #88]	; (800288c <TIM_OC3_SetConfig+0xe0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d003      	beq.n	800283e <TIM_OC3_SetConfig+0x92>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a15      	ldr	r2, [pc, #84]	; (8002890 <TIM_OC3_SetConfig+0xe4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d113      	bne.n	8002866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800284c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	621a      	str	r2, [r3, #32]
}
 8002880:	bf00      	nop
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40010000 	.word	0x40010000
 8002890:	40010400 	.word	0x40010400

08002894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	031b      	lsls	r3, r3, #12
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <TIM_OC4_SetConfig+0xa4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_OC4_SetConfig+0x68>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <TIM_OC4_SetConfig+0xa8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d109      	bne.n	8002910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	621a      	str	r2, [r3, #32]
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40010000 	.word	0x40010000
 800293c:	40010400 	.word	0x40010400

08002940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f023 0201 	bic.w	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f023 030a 	bic.w	r3, r3, #10
 800297c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	621a      	str	r2, [r3, #32]
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299e:	b480      	push	{r7}
 80029a0:	b087      	sub	sp, #28
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f023 0210 	bic.w	r2, r3, #16
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	031b      	lsls	r3, r3, #12
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f043 0307 	orr.w	r3, r3, #7
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	021a      	lsls	r2, r3, #8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2201      	movs	r2, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	401a      	ands	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e05a      	b.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d01d      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10c      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40010400 	.word	0x40010400
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40001800 	.word	0x40001800

08002bb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e03d      	b.n	8002c50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e03f      	b.n	8002cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fd feec 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fce9 	bl	8003678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	4613      	mov	r3, r2
 8002d02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d11d      	bne.n	8002d4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_UART_Receive_IT+0x26>
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e016      	b.n	8002d4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Receive_IT+0x38>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e00f      	b.n	8002d4e <HAL_UART_Receive_IT+0x58>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fac0 	bl	80032c8 <UART_Start_Receive_IT>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	e000      	b.n	8002d4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b0ba      	sub	sp, #232	; 0xe8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_UART_IRQHandler+0x66>
 8002daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fba3 	bl	8003502 <UART_Receive_IT>
      return;
 8002dbc:	e256      	b.n	800326c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80de 	beq.w	8002f84 <HAL_UART_IRQHandler+0x22c>
 8002dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80d1 	beq.w	8002f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_UART_IRQHandler+0xae>
 8002dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_UART_IRQHandler+0xd2>
 8002e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0202 	orr.w	r2, r3, #2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_UART_IRQHandler+0xf6>
 8002e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0204 	orr.w	r2, r3, #4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d011      	beq.n	8002e7e <HAL_UART_IRQHandler+0x126>
 8002e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f043 0208 	orr.w	r2, r3, #8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 81ed 	beq.w	8003262 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x14e>
 8002e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fb2e 	bl	8003502 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x17a>
 8002eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d04f      	beq.n	8002f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fa36 	bl	8003344 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d141      	bne.n	8002f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3314      	adds	r3, #20
 8002eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3314      	adds	r3, #20
 8002f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1d9      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d013      	beq.n	8002f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	4a7d      	ldr	r2, [pc, #500]	; (8003134 <HAL_UART_IRQHandler+0x3dc>)
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f93f 	bl	80011ca <HAL_DMA_Abort_IT>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	e00e      	b.n	8002f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f99a 	bl	800329c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e00a      	b.n	8002f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f996 	bl	800329c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	e006      	b.n	8002f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f992 	bl	800329c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f7e:	e170      	b.n	8003262 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	bf00      	nop
    return;
 8002f82:	e16e      	b.n	8003262 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	f040 814a 	bne.w	8003222 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8143 	beq.w	8003222 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 813c 	beq.w	8003222 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	f040 80b4 	bne.w	8003138 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8140 	beq.w	8003266 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	f080 8139 	bcs.w	8003266 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003006:	f000 8088 	beq.w	800311a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800303a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800304e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1d9      	bne.n	800300a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3314      	adds	r3, #20
 800305c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3314      	adds	r3, #20
 8003076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800307a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800307e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800308c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e1      	bne.n	8003056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3314      	adds	r3, #20
 8003098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3314      	adds	r3, #20
 80030b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e3      	bne.n	8003092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ea:	f023 0310 	bic.w	r3, r3, #16
 80030ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	330c      	adds	r3, #12
 80030f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80030fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003104:	e841 2300 	strex	r3, r2, [r1]
 8003108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800310a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e3      	bne.n	80030d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd ffe8 	bl	80010ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003122:	b29b      	uxth	r3, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	b29b      	uxth	r3, r3
 8003128:	4619      	mov	r1, r3
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8c0 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003130:	e099      	b.n	8003266 <HAL_UART_IRQHandler+0x50e>
 8003132:	bf00      	nop
 8003134:	0800340b 	.word	0x0800340b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003140:	b29b      	uxth	r3, r3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 808b 	beq.w	800326a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8086 	beq.w	800326a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003182:	647a      	str	r2, [r7, #68]	; 0x44
 8003184:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e3      	bne.n	800315e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3314      	adds	r3, #20
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	623b      	str	r3, [r7, #32]
   return(result);
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3314      	adds	r3, #20
 80031b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031ba:	633a      	str	r2, [r7, #48]	; 0x30
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e3      	bne.n	8003196 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003200:	61fa      	str	r2, [r7, #28]
 8003202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	69b9      	ldr	r1, [r7, #24]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	617b      	str	r3, [r7, #20]
   return(result);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e3      	bne.n	80031dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f848 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003220:	e023      	b.n	800326a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_UART_IRQHandler+0x4ea>
 800322e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f8f9 	bl	8003432 <UART_Transmit_IT>
    return;
 8003240:	e014      	b.n	800326c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00e      	beq.n	800326c <HAL_UART_IRQHandler+0x514>
 800324e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f939 	bl	80034d2 <UART_EndTransmit_IT>
    return;
 8003260:	e004      	b.n	800326c <HAL_UART_IRQHandler+0x514>
    return;
 8003262:	bf00      	nop
 8003264:	e002      	b.n	800326c <HAL_UART_IRQHandler+0x514>
      return;
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <HAL_UART_IRQHandler+0x514>
      return;
 800326a:	bf00      	nop
  }
}
 800326c:	37e8      	adds	r7, #232	; 0xe8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop

08003274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2222      	movs	r2, #34	; 0x22
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003314:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b095      	sub	sp, #84	; 0x54
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800336c:	643a      	str	r2, [r7, #64]	; 0x40
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003374:	e841 2300 	strex	r3, r2, [r1]
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e5      	bne.n	800334c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3314      	adds	r3, #20
 8003386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d119      	bne.n	80033f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f023 0310 	bic.w	r3, r3, #16
 80033d2:	647b      	str	r3, [r7, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033dc:	61ba      	str	r2, [r7, #24]
 80033de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6979      	ldr	r1, [r7, #20]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	613b      	str	r3, [r7, #16]
   return(result);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033fe:	bf00      	nop
 8003400:	3754      	adds	r7, #84	; 0x54
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7ff ff39 	bl	800329c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b21      	cmp	r3, #33	; 0x21
 8003444:	d13e      	bne.n	80034c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344e:	d114      	bne.n	800347a <UART_Transmit_IT+0x48>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d110      	bne.n	800347a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	1c9a      	adds	r2, r3, #2
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	621a      	str	r2, [r3, #32]
 8003478:	e008      	b.n	800348c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	1c59      	adds	r1, r3, #1
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6211      	str	r1, [r2, #32]
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29b      	uxth	r3, r3
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4619      	mov	r1, r3
 800349a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff febe 	bl	8003274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08c      	sub	sp, #48	; 0x30
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;


  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b22      	cmp	r3, #34	; 0x22
 8003514:	f040 80ab 	bne.w	800366e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003520:	d117      	bne.n	8003552 <UART_Receive_IT+0x50>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d113      	bne.n	8003552 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	b29a      	uxth	r2, r3
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	801a      	strh	r2, [r3, #0]

      huart->pRxBuffPtr += 2U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	1c9a      	adds	r2, r3, #2
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
 8003550:	e026      	b.n	80035a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003564:	d007      	beq.n	8003576 <UART_Receive_IT+0x74>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <UART_Receive_IT+0x82>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e008      	b.n	8003596 <UART_Receive_IT+0x94>

      }
      else
      {
    	  *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003590:	b2da      	uxtb	r2, r3
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	701a      	strb	r2, [r3, #0]

      }
      huart->pRxBuffPtr += 1U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4619      	mov	r1, r3
 80035ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d15a      	bne.n	800366a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0220 	bic.w	r2, r2, #32
 80035c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d135      	bne.n	8003660 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	613b      	str	r3, [r7, #16]
   return(result);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f023 0310 	bic.w	r3, r3, #16
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361a:	623a      	str	r2, [r7, #32]
 800361c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	69f9      	ldr	r1, [r7, #28]
 8003620:	6a3a      	ldr	r2, [r7, #32]
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	61bb      	str	r3, [r7, #24]
   return(result);
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e5      	bne.n	80035fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b10      	cmp	r3, #16
 800363a:	d10a      	bne.n	8003652 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003656:	4619      	mov	r1, r3
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff fe29 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
 800365e:	e002      	b.n	8003666 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fe11 	bl	8003288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e002      	b.n	8003670 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3730      	adds	r7, #48	; 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b0c0      	sub	sp, #256	; 0x100
 800367e:	af00      	add	r7, sp, #0
 8003680:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	ea40 0301 	orr.w	r3, r0, r1
 80036a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036d0:	f021 010c 	bic.w	r1, r1, #12
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036de:	430b      	orrs	r3, r1
 80036e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	6999      	ldr	r1, [r3, #24]
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	ea40 0301 	orr.w	r3, r0, r1
 80036fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b8f      	ldr	r3, [pc, #572]	; (8003944 <UART_SetConfig+0x2cc>)
 8003708:	429a      	cmp	r2, r3
 800370a:	d005      	beq.n	8003718 <UART_SetConfig+0xa0>
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b8d      	ldr	r3, [pc, #564]	; (8003948 <UART_SetConfig+0x2d0>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7fe fbb4 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 800371c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003720:	e003      	b.n	800372a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003722:	f7fe fb9b 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8003726:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	f040 810c 	bne.w	8003950 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003742:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003746:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800374a:	4622      	mov	r2, r4
 800374c:	462b      	mov	r3, r5
 800374e:	1891      	adds	r1, r2, r2
 8003750:	65b9      	str	r1, [r7, #88]	; 0x58
 8003752:	415b      	adcs	r3, r3
 8003754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800375a:	4621      	mov	r1, r4
 800375c:	eb12 0801 	adds.w	r8, r2, r1
 8003760:	4629      	mov	r1, r5
 8003762:	eb43 0901 	adc.w	r9, r3, r1
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	4623      	mov	r3, r4
 8003780:	eb18 0303 	adds.w	r3, r8, r3
 8003784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003788:	462b      	mov	r3, r5
 800378a:	eb49 0303 	adc.w	r3, r9, r3
 800378e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800379e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037a6:	460b      	mov	r3, r1
 80037a8:	18db      	adds	r3, r3, r3
 80037aa:	653b      	str	r3, [r7, #80]	; 0x50
 80037ac:	4613      	mov	r3, r2
 80037ae:	eb42 0303 	adc.w	r3, r2, r3
 80037b2:	657b      	str	r3, [r7, #84]	; 0x54
 80037b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037bc:	f7fc fd04 	bl	80001c8 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4b61      	ldr	r3, [pc, #388]	; (800394c <UART_SetConfig+0x2d4>)
 80037c6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	011c      	lsls	r4, r3, #4
 80037ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	1891      	adds	r1, r2, r2
 80037e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80037e8:	415b      	adcs	r3, r3
 80037ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037f0:	4641      	mov	r1, r8
 80037f2:	eb12 0a01 	adds.w	sl, r2, r1
 80037f6:	4649      	mov	r1, r9
 80037f8:	eb43 0b01 	adc.w	fp, r3, r1
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003808:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800380c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003810:	4692      	mov	sl, r2
 8003812:	469b      	mov	fp, r3
 8003814:	4643      	mov	r3, r8
 8003816:	eb1a 0303 	adds.w	r3, sl, r3
 800381a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800381e:	464b      	mov	r3, r9
 8003820:	eb4b 0303 	adc.w	r3, fp, r3
 8003824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003834:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003838:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800383c:	460b      	mov	r3, r1
 800383e:	18db      	adds	r3, r3, r3
 8003840:	643b      	str	r3, [r7, #64]	; 0x40
 8003842:	4613      	mov	r3, r2
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	647b      	str	r3, [r7, #68]	; 0x44
 800384a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800384e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003852:	f7fc fcb9 	bl	80001c8 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4611      	mov	r1, r2
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <UART_SetConfig+0x2d4>)
 800385e:	fba3 2301 	umull	r2, r3, r3, r1
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2264      	movs	r2, #100	; 0x64
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	1acb      	subs	r3, r1, r3
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <UART_SetConfig+0x2d4>)
 8003874:	fba3 2302 	umull	r2, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003880:	441c      	add	r4, r3
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800388c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003890:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003894:	4642      	mov	r2, r8
 8003896:	464b      	mov	r3, r9
 8003898:	1891      	adds	r1, r2, r2
 800389a:	63b9      	str	r1, [r7, #56]	; 0x38
 800389c:	415b      	adcs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a4:	4641      	mov	r1, r8
 80038a6:	1851      	adds	r1, r2, r1
 80038a8:	6339      	str	r1, [r7, #48]	; 0x30
 80038aa:	4649      	mov	r1, r9
 80038ac:	414b      	adcs	r3, r1
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038bc:	4659      	mov	r1, fp
 80038be:	00cb      	lsls	r3, r1, #3
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c6:	4651      	mov	r1, sl
 80038c8:	00ca      	lsls	r2, r1, #3
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	4642      	mov	r2, r8
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038d8:	464b      	mov	r3, r9
 80038da:	460a      	mov	r2, r1
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038f8:	460b      	mov	r3, r1
 80038fa:	18db      	adds	r3, r3, r3
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	4613      	mov	r3, r2
 8003900:	eb42 0303 	adc.w	r3, r2, r3
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800390a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800390e:	f7fc fc5b 	bl	80001c8 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <UART_SetConfig+0x2d4>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <UART_SetConfig+0x2d4>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 0207 	and.w	r2, r3, #7
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4422      	add	r2, r4
 800393e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003940:	e105      	b.n	8003b4e <UART_SetConfig+0x4d6>
 8003942:	bf00      	nop
 8003944:	40011000 	.word	0x40011000
 8003948:	40011400 	.word	0x40011400
 800394c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800395a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800395e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003962:	4642      	mov	r2, r8
 8003964:	464b      	mov	r3, r9
 8003966:	1891      	adds	r1, r2, r2
 8003968:	6239      	str	r1, [r7, #32]
 800396a:	415b      	adcs	r3, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003972:	4641      	mov	r1, r8
 8003974:	1854      	adds	r4, r2, r1
 8003976:	4649      	mov	r1, r9
 8003978:	eb43 0501 	adc.w	r5, r3, r1
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	00eb      	lsls	r3, r5, #3
 8003986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800398a:	00e2      	lsls	r2, r4, #3
 800398c:	4614      	mov	r4, r2
 800398e:	461d      	mov	r5, r3
 8003990:	4643      	mov	r3, r8
 8003992:	18e3      	adds	r3, r4, r3
 8003994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003998:	464b      	mov	r3, r9
 800399a:	eb45 0303 	adc.w	r3, r5, r3
 800399e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039be:	4629      	mov	r1, r5
 80039c0:	008b      	lsls	r3, r1, #2
 80039c2:	4621      	mov	r1, r4
 80039c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c8:	4621      	mov	r1, r4
 80039ca:	008a      	lsls	r2, r1, #2
 80039cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039d0:	f7fc fbfa 	bl	80001c8 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <UART_SetConfig+0x4e4>)
 80039da:	fba3 2302 	umull	r2, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	011c      	lsls	r4, r3, #4
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	61b9      	str	r1, [r7, #24]
 80039fc:	415b      	adcs	r3, r3
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a04:	4641      	mov	r1, r8
 8003a06:	1851      	adds	r1, r2, r1
 8003a08:	6139      	str	r1, [r7, #16]
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4651      	mov	r1, sl
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4642      	mov	r2, r8
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a38:	464b      	mov	r3, r9
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	008b      	lsls	r3, r1, #2
 8003a60:	4641      	mov	r1, r8
 8003a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a66:	4641      	mov	r1, r8
 8003a68:	008a      	lsls	r2, r1, #2
 8003a6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a6e:	f7fc fbab 	bl	80001c8 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	; 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	4a34      	ldr	r2, [pc, #208]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a96:	441c      	add	r4, r3
 8003a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003aa0:	677a      	str	r2, [r7, #116]	; 0x74
 8003aa2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	1891      	adds	r1, r2, r2
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	415b      	adcs	r3, r3
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	1851      	adds	r1, r2, r1
 8003aba:	6039      	str	r1, [r7, #0]
 8003abc:	4649      	mov	r1, r9
 8003abe:	414b      	adcs	r3, r1
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ace:	4659      	mov	r1, fp
 8003ad0:	00cb      	lsls	r3, r1, #3
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad8:	4651      	mov	r1, sl
 8003ada:	00ca      	lsls	r2, r1, #3
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4642      	mov	r2, r8
 8003ae4:	189b      	adds	r3, r3, r2
 8003ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae8:	464b      	mov	r3, r9
 8003aea:	460a      	mov	r2, r1
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	663b      	str	r3, [r7, #96]	; 0x60
 8003afc:	667a      	str	r2, [r7, #100]	; 0x64
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	008b      	lsls	r3, r1, #2
 8003b0e:	4641      	mov	r1, r8
 8003b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b14:	4641      	mov	r1, r8
 8003b16:	008a      	lsls	r2, r1, #2
 8003b18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b1c:	f7fc fb54 	bl	80001c8 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003b26:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2164      	movs	r1, #100	; 0x64
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	3332      	adds	r3, #50	; 0x32
 8003b38:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4422      	add	r2, r4
 8003b4c:	609a      	str	r2, [r3, #8]
}
 8003b4e:	bf00      	nop
 8003b50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5a:	bf00      	nop
 8003b5c:	51eb851f 	.word	0x51eb851f

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4d0d      	ldr	r5, [pc, #52]	; (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	; (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4d0b      	ldr	r5, [pc, #44]	; (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	; (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f000 f820 	bl	8003bb8 <_init>
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08003bf0 	.word	0x08003bf0
 8003b9c:	08003bf0 	.word	0x08003bf0
 8003ba0:	08003bf0 	.word	0x08003bf0
 8003ba4:	08003bf4 	.word	0x08003bf4

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
